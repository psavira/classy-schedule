<!DOCTYPE html>
<html>

<head>
  {{> globalHead }}
  
  <link href="/css/addClass.css" rel="stylesheet" />
  <script src="https://unpkg.com/validator@latest/validator.min.js"></script>
  <script src="js/addClass.js"></script>
  <title>Add Class</title>
</head>

<body>
  <!-- NAVBAR START -->
  {{> navbar}}
  <!-- NAVBAR END -->

  <!-- FORM START -->
  <form id="classForm" name="classForm">
    <div class="grid-container">
      <label>Professor to Edit
        <select type="text" name="profId" id="profSelect" />
      </label>



      <script>

/** function to fetch profs from database */
// eslint-disable-next-line no-unused-vars

async function fetchProfessors() {
  // get prof select by id
  const profSelect = document.getElementById('profSelect');
  // fetch prof from db
  dbToken.then((token) => {
  return fetch('https://capstonedbapi.azurewebsites.net/professor-management/professors', 
    {
      headers: {'Authorization': token}
    })
  })
    // if response is good return it
    .then(async (response) => {
      if (response.ok) {
        return response.json();
      }
      // else error
      const errorText = await response.text();
      throw new Error(errorText);
    })
    // loop through the profs
    .then((profSelection) => {
      // eslint-disable-next-line no-restricted-syntax
      for (const professor of profSelection) {
        // create a option for every prof
        const profOption = document.createElement('option');
        // set value to prof id
        profOption.value = professor.professor_id;
        // set text to last name
        profOption.text = `Professor ${professor.last_name} ${professor.professor_id}`;
        // add each prof
        profSelect.appendChild(profOption);
      }
    })
    // catch errors and show messages
    .catch((error) => {
      clearAlerts();
      showAlert(error.message);
    });
}



/** function to show error messages */
function showAlert(alertText) {
  // create container to hold alerts
  const alertContainer = document.getElementById('alertContainer');
  // create alert div
  const alert = document.createElement('div');
  // add callout and warnings
  alert.classList.add('callout', 'warning');
  alert.innerText = alertText;
  // add alert to container
  alertContainer.appendChild(alert);
}

/** function to clear the alerts */
function clearAlerts() {
  // make alert container to hold alerts
  const alertContainer = document.getElementById('alertContainer');
  // array to hold all alerts
  const children = [...alertContainer.children];
  // loop through the alerts
  // eslint-disable-next-line no-restricted-syntax
  for (const child of children) {
    // print error
    console.log(child);
    // remove the error
    alertContainer.removeChild(child);
  }
}


</script>
<script>



 /*async function fetchCanTeach() {
        // make classSelect by id
        const classSelect = document.getElementById('testCan');
        // fetch courses from database
        dbToken.then((token) => {
  return fetch('https://capstonedbapi.azurewebsites.net/preference-management/class-preferences/can-teach/1', 
    {

      headers: {'Authorization': token}
    })
  })
        // if response okay return response
          .then(async (response) => {
            if (response.ok) {
              console.log(response.json());
              return response.json();
              
            }
            // otherwise error
            const errorText = await response.text();
            throw new Error(errorText);
          })
          // loop through courses
          .then((testpreferences) => {
            testpreferences.forEach((preference) => {
              // create element for each course
              const classOption = document.createElement('option');
              // set value to dept id
              classOption.value = preference.deptID;
              // set text to class Name
              classOption.textContent = preference.className;
              // add each course
              classSelect.appendChild(classOption);
            });
          })
          // catch errors and show message
          .catch((error) => {
            clearAlerts();
            showAlert(error.message);
          });
  
  }*/



/*async function fetchPreferTeach() {
  
}*/


    </script>
      <!-- I think i got all the errors except negatives -->

        <div class="cell small-6">
          <label>Class Number
            <input type="text" name="classNumber" maxlength="6" min="0"
              onkeyup="if(this.value<0){this.value= this.value * -1}" placeholder="xxxxxx" />
          </label>
        </div>
      </div>

      <div class="grid-x grid-padding-x">
        <div class="cell small-6">
          <label>Capacity
            <input type="number" name="capacity" placeholder="xx" pattern="\d*" min="0" max="99" maxlength="2"
              onkeyup="if(this.value<0){this.value= this.value * -1}"
              oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);"
              step="1" />
          </label>
        </div>

        <div class="cell small-6">
          <label>Credits
            <input type="number" name="credits" placeholder="x"
              oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);"
              onkeyup="if(this.value<0){this.value= this.value * -1}" max="4" min="0" step="1" maxlength="1" />
          </label>
        </div>
      </div>

      <div class="cell small-6">
          <label>Does class have a lab included
            <input type="checkbox" name="isLab" maxlength="5" min="4" placeholder="True or False"
             />
             <script>
               
             </script>
          </label>
        </div>
      </div>
      


      <button type="button" class="submit success button" onclick="submitForm()">
        Submit
      </button>
    </div>
  </form>
  <!-- FORM END -->

  <div id="alertContainer"></div>

  <!-- Run scripts on page load -->
  <script>
    fetchDepartments();
    fetchProfessors();
  // fetchCanTeach();
  </script>
 </body>
  {{> footer}}


 <style>
    .submit {
    margin-bottom: 15%;
}
  </style>

</html>